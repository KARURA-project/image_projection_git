<?xml version="1.0"?>

<launch>
  <arg name="camera_name" default="usb_cam" />
  <arg name="nodelet_manager" default="$(arg camera_name)_nodelet_manager"/>
  
  <!-- Publish the calibration -->
  <include file="$(find image_projection_demo)/launch/calibration_publisher.launch"/>
  
  
  <!-- Start the projections -->
  <node pkg="nodelet" type="nodelet" name="$(arg nodelet_manager)" args="manager" output="screen" respawn="true"/>

  <!-- Load parameters for all nodes -->
  <rosparam command="load" file="$(find image_projection_demo)/config/my_projections.yaml" subst_value="true"/>
  
  <!-- Front view pinhole projection -->
  <!--<node pkg="nodelet" type="nodelet" name="$(arg camera_name)_pinhole_front" args="load image_projection/PeriodicImageProjectionNodelet $(arg nodelet_manager)" output="screen" respawn="true">
    <rosparam file="$(find image_projection_demo)/config/$(arg camera_name)_cameras.yaml" command="load"/>
    
    <remap from="~projection" to="/$(arg camera_name)/pinhole_front/image_rect_color" />
    <remap from="~camera_info" to="/$(arg camera_name)/pinhole_front/camera_info" />
  </node>-->
  
  <!-- Mercator projection -->
  <node pkg="nodelet" type="nodelet" name="$(arg camera_name)_mercator_projection" args="load image_projection/PeriodicImageProjectionNodelet $(arg nodelet_manager)" output="screen" respawn="true">
    <rosparam file="$(find image_projection_demo)/config/$(arg camera_name)_cameras.yaml" command="load"/>
  
    <remap from="~projection" to="/$(arg camera_name)/mercator" />
  </node>

  <node pkg="nodelet" type="nodelet" name="$(arg camera_name)_mercator_projection_crop" args="load image_proc/crop_decimate $(arg nodelet_manager)">
    
    <param name="input" value="/usb_cam/mercator" />
    <!-- 出力画像トピック -->
    <param name="output" value="$(arg camera_name)_mercator_projection_crop/image_cropped" />
    <!-- クロップする領域の設定 -->
    <param name="~x_offset" value="50" />
    <param name="~y_offset" value="50" />
    <param name="~width" value="200" />
    <param name="~height" value="200" />
    <!-- デシメーションの設定 -->
    <param name="~decimation" value="2" />
  </node>

  <node name="image_view" pkg="image_view" type="image_view" respawn="false" output="screen">
        <!-- image_viewのimageトピックがimage_rawトピックをサブスクライブするように指定 -->
        <remap from="image" to="/usb_cam/mercator"/>
        <!-- 画像の縦横比を自動で判定して表示 ブール値 -->
        <param name="autosize" value="true"/>
    </node>

  <!--<node pkg="nodelet" type="nodelet" name="$(arg camera_name)_fisheye" args="load image_projection/PeriodicImageProjectionNodelet $(arg nodelet_manager)" output="screen" respawn="true">
    <rosparam file="$(find image_projection_demo)/config/$(arg camera_name)_cameras.yaml" command="load"/>
  
    <remap from="~projection" to="/$(arg camera_name)/mercator" />
  </node>-->

  <!-- Ideal fisheye -->
  <!-- Left fisheye -->
  <!--
  <node pkg="nodelet" type="nodelet" name="$(arg camera_name)_fisheye" args="load image_projection/PeriodicImageProjectionNodelet $(arg nodelet_manager)" output="screen" respawn="true">
    <rosparam file="$(find image_projection_demo)/config/$(arg camera_name)_cameras.yaml" command="load"/>

    <remap from="~projection" to="/$(arg camera_name)/ideal_fisheye" />
  </node>
  -->
  <!-- Right fisheye -->
  <!-- <node pkg="nodelet" type="nodelet" name="$(arg camera_name)_right_fisheye" args="load image_projection/PeriodicImageProjectionNodelet $(arg nodelet_manager)" output="screen" respawn="true">
    <rosparam file="$(find image_projection_demo)/config/$(arg camera_name)_cameras.yaml" command="load"/>

    <remap from="~projection" to="/$(arg camera_name)/right/ideal_fisheye" />
  </node>
  -->

</launch>
